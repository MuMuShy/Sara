{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pygame 1.9.4\n",
      "Hello from the pygame community. https://www.pygame.org/contribute.html\n",
      "greetings.yml Training: [####                ] 21%"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:24: DeprecationWarning: Call to deprecated function get_active_sheet (Use the .active property).\n",
      "/usr/local/lib/python3.7/site-packages/yaml/constructor.py:126: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\n",
      "  if not isinstance(key, collections.Hashable):\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "greetings.yml Training: [####################] 100%\n",
      "conversations.yml Training: [####################] 100%\n",
      "i am focus on\n",
      "\n",
      "\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "你是誰\n",
      "\n",
      "你是誰\n",
      "\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "i am focus on\n",
      "\n",
      "\n",
      "\n",
      "sara is not talking\n",
      "你是誰\n",
      "\n",
      "你是誰\n",
      "\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "你是誰\n",
      "\n",
      "你是誰\n",
      "\n",
      "你是誰\n",
      "\n",
      "你是誰\n",
      "你是誰\n",
      "\n",
      "你是誰\n",
      "\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "妳好\n",
      "\n",
      "你好\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "嗨 最近如何\n",
      "\n",
      "挺好\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "sara is not talking\n",
      "嗨 很高興見到你\n",
      "\n",
      "谢谢你。你也一样\n",
      "\n",
      "\n",
      "sara is not talking\n",
      "sara is not talking\n"
     ]
    }
   ],
   "source": [
    "import speech_recognition as sr\n",
    "import tempfile\n",
    "from gtts import gTTS\n",
    "from pygame import mixer\n",
    "import requests\n",
    "from time import ctime\n",
    "import time\n",
    "import pyttsx3\n",
    "import dlib\n",
    "import cv2\n",
    "import imutils\n",
    "from bs4 import BeautifulSoup\n",
    "import tkinter as tk\n",
    "import os\n",
    "from PIL import Image\n",
    "from PIL import ImageTk\n",
    "from pprint import pprint\n",
    "import re\n",
    "from SaraModules import *\n",
    "#Sara指令表\n",
    "def ReadAllCommand():\n",
    "    from openpyxl import load_workbook\n",
    "    wb=load_workbook('Sara指令表/Sara指令表.xlsx')\n",
    "    ws=wb.get_active_sheet()\n",
    "    SaraCommandDict=dict()\n",
    "    for i in range(2,ws.max_column+1):\n",
    "        SaraCommandDict[ws.cell(row=1,column=i).value]=[ws.cell(row=3,column=i).value,ws.cell(row=4,column=i).value]\n",
    "    return SaraCommandDict\n",
    "#Sara的喇賽聊天機器模組\n",
    "class SaraChat():\n",
    "    def getChatterbot(self):\n",
    "        from chatterbot import ChatBot\n",
    "        chatbot=ChatBot('Sara',trainer = 'chatterbot.trainers.ChatterBotCorpusTrainer')\n",
    "        # 載入(簡體)中文的問候語言庫\n",
    "        chatbot.train(\"chatterbot.corpus.chinese.greetings\")\n",
    "        # 載入(簡體)中文的對話語言庫\n",
    "        chatbot.train(\"chatterbot.corpus.chinese.conversations\")\n",
    "        return chatbot\n",
    "#Sara 的本體\n",
    "def CreatGUI():\n",
    "    #讀取所有指令檔\n",
    "    SaraCommandDict=ReadAllCommand()\n",
    "    #載入Chatbot\n",
    "    SaraChatterBot=SaraChat()\n",
    "    SaraChatterBot=SaraChatterBot.getChatterbot()\n",
    "    def SearchCommand(talk):\n",
    "        talk=talk.lower()\n",
    "        print(talk)\n",
    "        for t in SaraCommandDict.keys():\n",
    "            if re.findall(t,talk):\n",
    "                SpeakChinese('收到指令 開始執行...')\n",
    "                time.sleep(2)\n",
    "                #執行excel下的指令\n",
    "                exec(SaraCommandDict[t][0])\n",
    "                #講出callback\n",
    "                SpeakChinese(SaraCommandDict[t][1])\n",
    "                time.sleep(2)\n",
    "                return\n",
    "        #沒有指令 喇賽\n",
    "        data=SaraChatterBot.get_response(talk)\n",
    "        SpeakChinese(data)\n",
    "        print(data)\n",
    "    #sara的耳朵\n",
    "    def Listen():\n",
    "        print('sara is listening...')\n",
    "        r=sr.Recognizer()\n",
    "        with sr.Microphone() as source:\n",
    "            r.adjust_for_ambient_noise(source)\n",
    "            audio=r.listen(source)\n",
    "        data=\"\"\n",
    "        #開始語音辨識\n",
    "        try:\n",
    "            data=r.recognize_google(audio,language='zh-TW')\n",
    "            SearchCommand(data)\n",
    "            print(\"you said\"+data)\n",
    "        except sr.UnknownValueError:\n",
    "            print(\"Google Speech Recognition could not understand audio\")\n",
    "            SetIText('無法辨識 請再說一遍')\n",
    "        except sr.RequestError as e:\n",
    "            print(\"Could not request results from Google Speech Recognition service; {0}\".format(e))\n",
    "        SetIText(data)\n",
    "        return data\n",
    "    #Sara說英文\n",
    "    def callback():\n",
    "        print('a')\n",
    "    def Speak(sentence):\n",
    "        mixer.init()\n",
    "        with tempfile.NamedTemporaryFile(delete=True)as fp:\n",
    "            tts=gTTS(text=sentence,lang='en-US')\n",
    "            tts.save(\"{}.mp3\".format(fp.name))\n",
    "            mixer.music.load(\"{}.mp3\".format(fp.name))\n",
    "            mixer.music.play()\n",
    "            SetSaraText(sentence)\n",
    "    #Sara 中文\n",
    "    def SpeakChinese(sentence):\n",
    "        mixer.init()\n",
    "        with tempfile.NamedTemporaryFile(delete=True)as fp:\n",
    "            tts=gTTS(text=sentence,lang='zh-TW')\n",
    "            tts.save(\"{}.mp3\".format(fp.name))\n",
    "            mixer.music.load(\"{}.mp3\".format(fp.name))\n",
    "            mixer.music.play()\n",
    "            SetSaraText(sentence)\n",
    "    def Speak2(sentence):\n",
    "        mixer.init()\n",
    "        engine = mixer.init()\n",
    "        rate = engine.getProperty('rate')\n",
    "        engine.setProperty('rate', rate)\n",
    "        voices = engine.getProperty('voices')\n",
    "        engine.setProperty('voice',voices[7].id)\n",
    "        engine.say(sentence)\n",
    "        engine.runAndWait()\n",
    "    #Sara的大腦\n",
    "    def Sara(data):\n",
    "        #data=Listen()\n",
    "        if(data==\"\"):\n",
    "            return\n",
    "        if \"時間\" in data:\n",
    "            Speak(ctime())\n",
    "        if \"time\" in data:\n",
    "            Speak(ctime())\n",
    "        if \"百科\" in data:\n",
    "            Speak(\"what do you want to search?\")\n",
    "            Searching=Listen()\n",
    "            SpeakChinese(SearchWiki(Searching))  \n",
    "        if \"再見\" in data:\n",
    "            Speak('Goodbye nice to meet you')\n",
    "            os._exit(0)\n",
    "        if \"school\" in data:\n",
    "            ConnectIlearnBroadCast()\n",
    "    #當視窗被關注 被調用(問候)\n",
    "    def Onfocus(event):\n",
    "        first=False\n",
    "        if first==False:\n",
    "            if event.widget==window:\n",
    "                print('i am focus on')\n",
    "                window.update()\n",
    "                Speak('hi i am Sara')\n",
    "                time.sleep(1)\n",
    "                Speak('What can i help you?')\n",
    "                time.sleep(1)\n",
    "                SetSaraText('Hi i am Sara What Can I help You')\n",
    "                time.sleep(1)\n",
    "                first=True\n",
    "    #sara 使用者文字輸入接口\n",
    "    def SaraByText():\n",
    "        command=UserEntry.get()        \n",
    "    def SetSaraText(saratext):\n",
    "        canvas.delete('SaraText')\n",
    "        canvas.create_text(400,100,fill=\"white\",font=\"Times 30 italic bold\",text=saratext,tag='SaraText')\n",
    "        canvas.update()\n",
    "    def SetIText(Itext):\n",
    "        canvas.delete('Isay')\n",
    "        canvas.create_text(400,500,fill=\"white\",font=\"Times 20 italic bold\",text=Itext,tag='Isay')\n",
    "        canvas.update()\n",
    "    def test():\n",
    "        print('button test')\n",
    "    def SaraMainLoop():\n",
    "        if(mixer.music.get_busy()):\n",
    "            print('')\n",
    "        else:\n",
    "            print('sara is not talking')\n",
    "        window.after(1000, SaraMainLoop)\n",
    "    #退出程序\n",
    "    def on_closing():\n",
    "        window.destroy()\n",
    "        os._exit(0)\n",
    "    #創建Tk window\n",
    "    window=tk.Tk()\n",
    "    window.title('Sara')\n",
    "    window.geometry('800x600')\n",
    "    #創建canvas並設置背景圖\n",
    "    canvas=tk.Canvas(window,height=400,width=800)\n",
    "    img = Image.open(\"sara.jpg\")\n",
    "    img = img.resize((800,600), Image.ANTIALIAS)\n",
    "    photoImg =  ImageTk.PhotoImage(img)\n",
    "    canvas.create_image(0,0, image=photoImg,anchor='nw')\n",
    "    master=window\n",
    "    canvas.create_text(50,500,fill=\"white\",font=\"Times 40 italic bold\",text=\"\",tag='SaraText')\n",
    "    canvas.create_text(50,600,fill=\"white\",font=\"Times 20 italic bold\",text=\"\",tag='Isay')\n",
    "    canvas.pack()\n",
    "    #使用者文本輸入\n",
    "    UserEntry=tk.Entry(window)\n",
    "    UserEntry.pack(padx=100,pady=0)\n",
    "    #使用者輸入按鈕\n",
    "    UserInputbutton=tk.Button(window,text=\"輸入\",width=10,height=2,command=lambda:SearchCommand(UserEntry.get()))\n",
    "    UserInputbutton.pack(padx=50,pady=0)\n",
    "    #使用者說話按鈕\n",
    "    UserSaybutton=tk.Button(window,text='說話',width=10,height=2,command=lambda:Sara(Listen()))\n",
    "    UserSaybutton.pack(padx=100,pady=30)\n",
    "    #綁定event\n",
    "    window.bind(\"<FocusIn>\", Onfocus)\n",
    "    window.protocol(\"WM_DELETE_WINDOW\", on_closing)\n",
    "    #讓window 在最前視窗\n",
    "    window.lift()\n",
    "    window.attributes('-topmost', True)\n",
    "    os.system('''/usr/bin/osascript -e 'tell app \"Finder\" to set frontmost of process \"Python\" to true' ''')\n",
    "    #window loop\n",
    "    window.after(1000,SaraMainLoop)\n",
    "    window.mainloop()\n",
    "def main():\n",
    "    CreatGUI()\n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
